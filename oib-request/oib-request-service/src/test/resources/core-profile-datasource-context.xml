<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- =========================================== -->
	<!-- Properties files                            -->
	<!-- =========================================== -->
	
	<!--
		Property file locations: suppressed here because it might override the
		main context file's resources. The main context is responsible for
		defining them.
	-->

	<!-- =========================================== -->
	<!-- Annotation configuration                    -->
	<!-- =========================================== -->

	<context:annotation-config />

	<!-- =========================================== -->
	<!-- Data Layer                                  -->
	<!-- =========================================== -->

	
	<!--
		Data source: reads a properties file and injects them into a DBCP DS
		Second datasource for Resource Profiles
	-->
	<bean id="profiledataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"> 
      <property name="driverClass"><value>${datasource2.driver}</value></property> 
      <property name="jdbcUrl"><value>${datasource2.url}</value></property> 
      <property name="user"><value>${datasource2.user}</value></property> 
      <property name="password"><value>${datasource2.password}</value></property> 
      <property name="testConnectionOnCheckin"><value>true</value></property>
      <property name="maxStatements"><value>50</value></property>
      <property name="idleConnectionTestPeriod"><value>300</value></property>
    </bean>
	

	

<!-- Session factory -->
	<!-- Session Factory for the second datasource-->
	<bean id="profilesessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="profiledataSource" />

		<!--
			Hibernate configuration properties (read from a properties file)
		-->
		<property name="hibernateProperties">
			<bean
				class="org.springframework.beans.factory.config.PropertiesFactoryBean">
				
				<property name="locations">
					<list>
						<!--
							hibernate.config.file, datasource.config.file should be defined
							somewhere in the spring.properties layers
						-->
						<value>classpath:hibernate.properties
						</value>
				</list>
				</property>
			</bean>
		</property>

		<!-- Using improved naming strategy -->
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.DefaultNamingStrategy" />
		</property>

		<!--
			Reads package-level Hibernate annotations. Unfortunately, this has to
			be manually maintained for all model packages
		-->
		<property name="annotatedPackages">
			<list>
<!-- 				<value>edu.utah.further.core.data.oracle.type</value> -->
			</list>
		</property>

		<!-- Mapping annotated classes using search patterns -->
		<property name="annotatedClasses">
			<list>
				<value><![CDATA[org.openinfobutton.profiledb.domain.Profiles]]></value>
				<value><![CDATA[org.openinfobutton.profiledb.domain.ProfileBlackList]]></value>
			</list>
		</property>
	</bean>

<!-- 	Hibernate data access template -->
	<bean id="profilehibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="profilesessionFactory" />
	</bean>

	<!-- SimpleJdbcTemplate for use in testing -->
	<bean id="simpleJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg index="0" ref="profiledataSource" />
	</bean>

	<!-- =========================================== -->
	<!-- Transaction management                      -->
	<!-- =========================================== -->

	<!--
		Enable the configuration of transactional behavior based on
		annotations
	-->
	<tx:annotation-driven />

	<!-- a PlatformTransactionManager is still required -->
	<bean id="profiletransactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="profilesessionFactory" />
	</bean>


	
<!--    <bean id="daoEager" class="edu.utah.further.core.data.service.DaoHibernateEagerImpl" > -->
<!--    		<property name="sessionFactory" ref="sessionFactory"></property> -->
<!--    </bean> -->

<!--    <bean class="edu.utah.further.core.data.service.DaoHibernateEagerImpl"> -->
<!--    <constructor-arg ref="profilesessionFactory"/> -->
<!--    </bean> -->
   
   <bean id="profilesDao" class="edu.utah.further.core.data.service.DaoHibernateImpl">
   <constructor-arg ref="profilesessionFactory"/>
   </bean>
   <bean id="pDao" class="org.openinfobutton.profiledb.service.ProfilesDaoImpl"> </bean>
	<!-- =========================================== -->
	<!-- FURTHeR data layer                          -->
	<!-- =========================================== -->

	<!--
		Component auto-detection configuration in the data layer package. Must
		come AFTER sessionFactory is declared for some strange reason when
		deployed to the ESB.
	-->
<!-- 	<context:component-scan base-package="edu.utah.further.core.data" /> -->
	<context:component-scan base-package="edu.utah.further.profiledb.service" /> 
	
</beans>
